name: Laravel CI - management_apk

# üîπ Workflow ini jalan kalau ada push atau pull request ke branch main & develop
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  # =============================
  # 1Ô∏è‚É£ Setup PHP & Install Dependencies
  # =============================
  setup:
    name: Setup PHP & Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      php-version: ${{ steps.php-version.outputs.php }}
    steps:
      # Checkout source code
      - uses: actions/checkout@v4

      # Install PHP dengan ekstensi yang dibutuhkan
      - name: Setup PHP
        id: php-version
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, pdo_mysql, intl
          coverage: none

      # Cache vendor biar composer install lebih cepat
      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install dependencies
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      # Copy env khusus CI
      - name: Copy CI environment
        run: cp .env.ci .env

      # Generate APP_KEY
      - name: Generate App Key
        run: php artisan key:generate --ansi

  # =============================
  # 2Ô∏è‚É£ Setup Database MySQL
  # =============================
  database:
    name: MySQL Service
    runs-on: ubuntu-latest
    needs: setup
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: management
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4

      # Tunggu MySQL ready
      - name: Wait for MySQL
        run: |
          retries=20
          until mysqladmin ping -h127.0.0.1 -uroot -proot --silent || [ $retries -le 0 ]; do
            echo "Waiting for MySQL..."
            sleep 5
            retries=$((retries-1))
          done
          if [ $retries -le 0 ]; then
            echo "MySQL failed to start"
            exit 1
          fi

  # =============================
  # 3Ô∏è‚É£ Jalankan Migration
  # =============================
  migrate:
    name: Run Migrations
    runs-on: ubuntu-latest
    needs: [setup, database]
    steps:
      - uses: actions/checkout@v4
      - name: Run Laravel Migrations
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: management
          DB_USERNAME: root
          DB_PASSWORD: root
        run: php artisan migrate --force

  # =============================
  # 4Ô∏è‚É£ Jalankan Test
  # =============================
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - uses: actions/checkout@v4
      - name: Run Laravel Tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: management
          DB_USERNAME: root
          DB_PASSWORD: root
        run: php artisan test --stop-on-failure --verbose

  # =============================
  # 5Ô∏è‚É£ Code Quality & Static Analysis
  # =============================
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      # Install tools dev: phpcs & larastan
      - name: Install Dev Tools
        run: |
          composer require --dev squizlabs/php_codesniffer nunomaduro/larastan

      # Jalankan PHP CodeSniffer (cek standar PSR-12)
      - name: Code Standard Check (phpcs)
        run: |
          vendor/bin/phpcs --standard=PSR12 app/ routes/ database/

      # Jalankan Static Analysis pakai Larastan (phpstan)
      - name: Static Analysis (Larastan)
        run: |
          vendor/bin/phpstan analyse -c phpstan.neon.dist --memory-limit=1G
