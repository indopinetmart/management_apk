name: Laravel CI/CD - management_apk

# 🔹 Workflow berjalan otomatis ketika ada push ke branch main
on:
  push:
    branches: [ "main" ]

jobs:
  # =============================
  # 1️⃣ Continuous Integration (CI)
  # =============================
  ci:
    name: Laravel CI
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: management
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1️⃣ Checkout kode dari GitHub
      - uses: actions/checkout@v4

      # 2️⃣ Setup PHP versi 8.2 dengan ekstensi Laravel butuh
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, pdo_mysql, intl
          coverage: none

      # 3️⃣ Install dependencies PHP
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # 4️⃣ Copy environment khusus CI
      - name: Copy CI Environment
        run: cp .env.ci .env

      # 5️⃣ Generate APP_KEY Laravel
      - name: Generate App Key
        run: php artisan key:generate --ansi

      # 6️⃣ Jalankan migration di database MySQL CI
      - name: Run Migrations
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: management
          DB_USERNAME: root
          DB_PASSWORD: root
        run: php artisan migrate --force

      # 7️⃣ Jalankan PHPUnit test
      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: management
          DB_USERNAME: root
          DB_PASSWORD: root
        run: vendor/bin/phpunit --stop-on-failure --testdox

  # =============================
  # 2️⃣ Continuous Deployment (CD)
  # =============================
  cd:
    name: Deploy to Hostinger
    runs-on: ubuntu-latest
    needs: ci # hanya jalan kalau CI sukses ✅

    steps:
      # 1️⃣ Checkout repo (biar action punya akses file GitHub)
      - uses: actions/checkout@v4

      # 2️⃣ Deploy via SSH ke Hostinger
      - name: Deploy to Hostinger via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: 145.223.108.62                # IP Hostinger kamu
          username: u943606636                # Username SSH Hostinger
          key: ${{ secrets.HOSTINGER_SSH_KEY }} # Private key Ed25519 yang kamu buat
          port: 65002                         # Port SSH Hostinger
          script: |
            # Masuk ke folder project
            cd ~/public_html

            # 🔄 Tarik kode terbaru dari GitHub
            if [ ! -d ".git" ]; then
              # Clone pertama kali (pakai HTTPS supaya gak perlu key GitHub)
              git clone https://github.com/indopinetmart/management_apk.git .
            else
              # Kalau sudah ada repo, ambil update terbaru
              git fetch origin main
              git reset --hard origin/main
            fi

            # 📄 Copy .env.production jadi .env
            if [ -f ".env.production" ]; then
              cp .env.production .env
              echo "✅ .env.production dicopy ke .env"
            else
              echo "⚠️ WARNING: .env.production tidak ditemukan!"
            fi

            # 📦 Install dependencies PHP (tanpa dev)
            composer install --no-dev --optimize-autoloader

            # 🔧 Clear cache Laravel
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan cache:clear

            # 🔧 Rebuild cache Laravel
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # 🗄️ Jalankan migration di production
            php artisan migrate --force

            # 🎨 Build asset front-end (jika Node.js tersedia di server)
            if command -v npm > /dev/null 2>&1; then
              npm install
              npm run build
            else
              echo "⚠️ Node.js tidak ada di server, build asset sebaiknya dilakukan di GitHub Actions"
            fi

            # 🔑 Atur permission folder penting
            chmod -R 755 storage bootstrap/cache

            # 🚦 Restart queue worker kalau ada
            if php artisan queue:status > /dev/null 2>&1; then
              php artisan queue:restart
            fi

            echo "✅ Deployment selesai di Hostinger 🎉"
