name: Laravel CI/CD - Management Pinetmart (Zero Downtime + Backup + Cleanup)

on:
  push:
    branches:
      - main
      - develop   # Workflow jalan kalau ada push ke branch main / develop

jobs:
  # =============================
  # 1Ô∏è‚É£ Continuous Integration (CI)
  # =============================
  ci:
    name: Laravel CI
    runs-on: ubuntu-latest

    services:
      mysql:                      # Service MySQL untuk test CI
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: management
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. Ambil kode dari repo
      - name: Checkout Repo
        uses: actions/checkout@v4

      # 2. Setup PHP sesuai versi project
      - name: Setup PHP 8.2
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, bcmath, pdo_mysql, intl

      # 3. Install dependency composer
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # 4. Pakai env untuk CI (opsional)
      - name: Copy CI Environment
        run: cp .env.ci .env || echo "‚ö†Ô∏è CI env file tidak ada, dilewati"

      # 5. Generate app key biar bisa jalan
      - name: Generate App Key
        run: php artisan key:generate --ansi

      # 6. (Opsional) jalankan migration + test
      - name: Skip Migrations & Tests
        run: echo "‚úÖ CI jalan, tapi migrations & tests dilewati"

  # =============================
  # 2Ô∏è‚É£ Continuous Deployment (CD)
  # =============================
  cd:
    name: Deploy Laravel Zero Downtime (Hostinger)
    runs-on: ubuntu-latest
    needs: ci   # CD hanya jalan kalau CI sukses

    steps:
      # 1. Deploy via SSH ke Hostinger
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            set -e
            echo "üöÄ Zero Downtime Deploy Laravel..."

            # -------------------------------
            # 1. Tentukan folder utama
            # -------------------------------
            APP_DIR=~/domains/management-pinetmart.srf-group.com
            WEB_ROOT=$APP_DIR/public_html
            RELEASES_DIR=$APP_DIR/releases
            RELEASE_NAME=$(date +%Y%m%d_%H%M%S)   # nama release pakai timestamp
            NEW_RELEASE=$RELEASES_DIR/$RELEASE_NAME
            BACKUP_FOLDER=$APP_DIR/backup_$RELEASE_NAME

            # -------------------------------
            # 2. Backup sebelum deploy
            # -------------------------------
            echo "üíæ Backup storage & public_html"
            mkdir -p $BACKUP_FOLDER
            cp -r $APP_DIR/storage $BACKUP_FOLDER/storage || echo "‚ö†Ô∏è Storage kosong"
            cp -r $WEB_ROOT $BACKUP_FOLDER/public || echo "‚ö†Ô∏è Public kosong"

            # -------------------------------
            # 3. Buat release baru
            # -------------------------------
            mkdir -p $NEW_RELEASE
            git clone --branch main https://github.com/indopinetmart/management_apk.git $NEW_RELEASE

            # -------------------------------
            # 4. Shared resource (env & storage)
            # -------------------------------
            echo "üìÑ Gunakan .env & storage lokal (manual, bukan dari GitHub Secrets)"
            ln -sfn $APP_DIR/.env $NEW_RELEASE/.env
            ln -sfn $APP_DIR/storage $NEW_RELEASE/storage

            # -------------------------------
            # 5. Install dependencies + migrate + cache
            # -------------------------------
            cd $NEW_RELEASE
            composer install --no-dev --no-interaction --prefer-dist --optimize-autoloader --ansi
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # -------------------------------
            # 6. Update symlink "current" ke release baru
            # -------------------------------
            ln -sfn $NEW_RELEASE $APP_DIR/current

            # -------------------------------
            # 7. Update public_html agar load current/
            # -------------------------------
            ln -sfn $APP_DIR/current/public/index.php $WEB_ROOT/index.php
            ln -sfn $APP_DIR/current/public/.htaccess $WEB_ROOT/.htaccess

            # -------------------------------
            # 8. Set permission
            # -------------------------------
            chmod -R ug+rwx $NEW_RELEASE/storage $NEW_RELEASE/bootstrap/cache
            chmod -R 755 $WEB_ROOT
            chmod 644 $APP_DIR/.env $WEB_ROOT/index.php $WEB_ROOT/.htaccess

            # -------------------------------
            # 9. Cleanup file sensitif
            # -------------------------------
            rm -rf $NEW_RELEASE/.git
            rm -f $NEW_RELEASE/phpunit.xml $NEW_RELEASE/README.md $NEW_RELEASE/LICENSE

            # -------------------------------
            # üîü Cleanup release lama (keep 5 terakhir)
            # -------------------------------
            echo "üßπ Hapus release lama, simpan 5 terakhir"
            cd $RELEASES_DIR
            ls -1t | tail -n +6 | xargs rm -rf || true

            echo "‚úÖ Deployment selesai tanpa downtime!"
            echo "üìÇ Release aktif: $RELEASE_NAME"
            echo "üíæ Backup: $BACKUP_FOLDER"
